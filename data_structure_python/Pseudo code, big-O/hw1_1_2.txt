## 1.2. What's the running time of the `binarySearch_1()` is N in Big-Oh representation, when the size of `list_in`? Explain why you think like that.

1. Write your Answer in the blank: 

   binarySearch_1() runs in O(N)  

2. Explain your reason below:

전체 데이터 수를 N이라고 하면, 이 코드에서는 재귀함수를 통해서 함수를 반복하면서 N/2, (N/2) * 
(1/2), (N/2) * (1/2) * (1/2) ... 를 반복하면서 k번 반복한다고 하면, (1/2)^k * N 이 되므로, 이것이 
(1/2)^k * N =1을 만족시키므로 2^k = N , 이를 정리해서 나타내면 k=logN ( 밑이 2인 로그 )
즉, k가 탐색 횟수이므로, 시행 횟수가 logN이 된다. 이를 먼저 기억하자.

작성한 코드를 기반으로 구체적으로 설명하도록 하겠다.

먼저, 첫 줄을 살펴보자.
mid = len(list_in) // 2
이 것은, len(list_in)이 O(1)을 만족한다. 

두 번째로는, 슬라이싱 작업인데, 이는 
left = list_in[:mid]
    right = list_in[mid+1:] 이렇게 작성하였고,
이 것은, O(k)의 시간 복잡도를 가지고, 작동 시간은 O(N)이다.
자체의 시간이 O(N)이 걸리고,
재귀함수를 돌 때마다 1/2배가 된다.
그러면, N + N*(1/2) + N*(1/2)^2 .... +N*(1/2)^(logN)
이를 등비급수의 합으로 나타내면, N(1-2^(-logN))/(1-(1/2)) 이므로, 여기서 2^(-logN)이 1/N 이므로
(log 밑이 2이므로) 2N-2, 즉, 전체의 O(N)으로 나타내어진다.


if mid < 0 or mid >= len(list_in):
        return -1
의 작동 시간은 O(1)

 if list_in[mid] == value:
        return offset+mid
의 작동 시간 또한 일치하는지를 확인하는 작업이므로
O(1)

그리고 마지막
elif list_in[mid] > value:
        return binarySearch_1(left, value, offset)
    else:
        return binarySearch_1(right, value, offset+mid+1)

여기 부분이 중간값이 찾고자 하는 값보다 큰 지 작은 지 판단하고 리스트를 절반으로 나누어 이진 탐색을 수행하므로, 이것이 재귀함수를 통하여 반복되므로 시간 복잡도를 O(logN)을 가지게 된다.

O(logN)보다 O(N) 값이 크므로,
즉, 이 코드는 O(N)을 따르게 된다.

